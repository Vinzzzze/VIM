/**
 * @file [@ELEMENT_FILE@]
 *
 * The factory to build the node that [@ELEMENT_DESC@]
 *
 * @author [@ELEMENT_AUTHOR@] - [@ELEMENT_EMAIL@]
 * @date [@ELEMENT_DATE@]
 * @verbatim
 * -------------------------
 * @endverbatim
*/

#pragma once

//---< Inclusions >-------------------------------------------------------------

#include "stdBaseDefinition.mac"

#include "BASE/base_FactoryFunctionNode.hpp"
#include "[@NODEFOLDER@]/[@NODEFILENAME@].hpp"

//---< Predefined Types >-------------------------------------------------------
//---< Structures >-------------------------------------------------------------
//---< Macros >-----------------------------------------------------------------
//---< Classe >-----------------------------------------------------------------

/**
 * The factory to build the function fct_GetTotalLinesNode class's instances.
*/
class [@ELEMENT_NAME@]
 : VM_PUBLIC base_FactoryFunctionNode
{
   VM_PRIVATE:

      // Attributes
      //-----------

      // Function
      //---------

      /**
       * The virtual function used to create the node.
       *
       * @param handler - data_FormulaHandler* : The formula handler used to build the mode
       * @param formula - base_Formula* : The formula for which the node is built
       * @param extra - void* : The extra parameter used to get the way the built had to be done
       * @param manager - heap_FormulaManager* : The formula heap manager used
       * @param identifier - void* : The node identifier
       * @param comment - data_StringStream* : The node comment
       * @param parameters - base_Dynamic* : The parameter list
       * @param defaultParameters - base_Dynamic* : The description's parameter list
       * @param status - int : The initial status node
       * @param totalSize - size_t : The total size to allocate
       * @param objectSize - size_t : The current object size to allocate
       * @param firstPage - char* : Address of the buffer used for the first page for the parent list
       * @param firstPageSize - size_t : Size of the first page buffer for the parent list.
       * @param value - void* : The value of the function
       * @param valueType - DYNAMIC_TYPE : The value type of the function
       * @param identifierHandler - int_IdentifierHandler* : The identifier handler object
       * @param contextHandler - int_ContextHandler* : Describe how the execution context had to be used
       * @param expectedPageSize - size_t : The page size to reserve in the parent list vector
       * @param type - int : The node type
       * @param allocator - heap_PageAllocator* : The way the pages are allocated in the parent list vector
       * @param callbackMallocUsed - fctCallbackAllocation : The callback used each time a page is allocated
       * @param callbackMallocParam - void* : The parameter pass to the callback used each time a page is allocated
       *
       * @return The created node.
      */
      virtual base_FormulaNode* create( data_FormulaHandler*   handler,
                                        base_Formula*          formula,
                                        void*                  extra,
                                        heap_FormulaManager*   manager,
                                        void*                  identifier,
                                        data_StringStream*     comment,
                                        base_Dynamic*          parameters,
                                        base_Dynamic*          defaultParameters,
                                        int                    status,
                                        size_t                 totalSize,
                                        size_t                 objectSize,
                                        char*                  firstPage,
                                        size_t                 firstPageSize,
                                        void*                  value,
                                        DYNAMIC_TYPE           valueType,
                                        int_IdentifierHandler* identifierHandler,
                                        int_ContextHandler*    contextHandler,
                                        size_t                 expectedPageSize,
                                        int                    type,
                                        heap_PageAllocator*    allocator,
                                        fctCallbackAllocation  callbackMallocUsed,
                                        void*                  callbackMallocParam );
   VM_PROTECTED:
   VM_PUBLIC:

      // Constructor
      //------------

      /**
       * Constructor
       *
       * @param allocatedSize - size_t : The allocated size for each object
       * @param identifierHandler - int_IdentifierHandler* : The class used to handle the node identifier build
       * @param fctRemove - base_HashTable::fctDeleteReference : The function used to remove the existing node before creating the new one.
      */
      VM_INLINE [@ELEMENT_NAME@]( size_t                             allocatedSize,
                                  int_IdentifierHandler*             identifierHandler,
                                  base_HashTable::fctDeleteReference fctRemove )
       : base_FactoryFunctionNode( allocatedSize,
                                   identifierHandler,
                                   fctRemove,
                                   FUNCTION_[@BASEMACRO@]_FORMULA_TYPE,
                                   sizeof( [@NODEFILENAME@] ) )
      {
      }

      /**
       * Copy constructor
       *
       * @param toCopy - const [@ELEMENT_NAME@]& : Object to copy
      */
      [@ELEMENT_NAME@]( const [@ELEMENT_NAME@]& toCopy );

      /**
       * Destructor
      */
      virtual ~[@ELEMENT_NAME@]();
};

//---< End of file >------------------------------------------------------------

