/**
 * @file [@ELEMENT_FILE@]
 *
 * [@ELEMENT_DESC@]
 *
 * @author [@ELEMENT_AUTHOR@] - [@ELEMENT_EMAIL@]
 * @date [@ELEMENT_DATE@]
 * @verbatim
 * -------------------------
 * @endverbatim
*/

#pragma once

/*---< Type >-----------------------------------------------------------------*/

typedef struct s_[@ELEMENT_NAME@] [@ELEMENT_NAME@];

/*---< Includes >-------------------------------------------------------------*/

#include <stddef.h>

#include "vmtypes.h"

#include "BASE/base_Command.h"
#include "BASE/base_ServerApplication.h"
#include "HEAP/heap_PageAllocator.h"
#include "INTERFACE/int_ErrorCommandHandler.h"

/*---< Functions >------------------------------------------------------------*/

/**
 * Constructeur. Initialise les attributs de la structure.
 *
 * @param current - [@ELEMENT_NAME@]* : Structure à initialiser.
 * @param pageAllocator - heap_PageAllocator* : The object use to allocate the pages
 * @param defaultHeapPage - char* : The initial base page of the allocator
 * @param defaultHeapPosition - char* : The initial heap position
 * @param defaultHeapSizeLeft - size_t : The initial heap size
 * @param errorHandler - int_ErrorCommandHandler* : The error handler
 * @param application - base_ServerApplication* : The application context to be used
 * @param signature - uint32 : The signature of the command
 * @param trackerId - uint32 : The tracker identifier to follow the command through the services
 * @param userId - ushort : The user identifier that launch the command
 *
 * @return Structure initialisée.
*/
[@ELEMENT_NAME@]* build_[@ELEMENT_NAME@]( [@ELEMENT_NAME@]* current,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  heap_PageAllocator*      pageAllocator,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  char*                    defaultHeapPage,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  char*                    defaultHeapPosition,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  size_t                   defaultHeapSizeLeft,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  int_ErrorCommandHandler* errorHandler,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  base_ServerApplication*  application,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  uint32                   signature,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  uint32                   trackerId,
[@ELEMENT_BLANK@]        [@ELEMENT_BLANK@]  ushort                   userId<@PARAM@> );
/**
 * Destructeur.
 *
 * @param current - [@ELEMENT_NAME@]* : Structure à détruire.
*/
void delete_[@ELEMENT_NAME@]( [@ELEMENT_NAME@]* current );

/**
 * The method used to release the command.
 *
 * @param command - base_Command* : The command to be released
 *
 * @return 0 if everything went ok, another value otherwise.
*/
int32 release_[@ELEMENT_NAME@]( base_Command*  command );

/**
 * The function to execute and to compute the fibonacci value.
 *
 * @param command - base_Command* : The command used for the execasion
 *
 * @return 0 if everything went ok, another value otherwise.
*/
int32 execute_[@ELEMENT_NAME@]( base_Command*  command );

/*---< End of file >----------------------------------------------------------*/

