/**
 * @file [@ELEMENT_FILE@]
 *
 * The message returned when [@ELEMENT_DESC@]
 *
 * @author [@ELEMENT_AUTHOR@] - [@ELEMENT_EMAIL@]
 * @date [@ELEMENT_DATE@]
 * @verbatim
 * -------------------------
 * @endverbatim
*/

//---< Inclusions >-------------------------------------------------------------

#include "BASE/base_Messages.hpp"
#include "DATA/data_LogObject.hpp"
#include "DATA/data_OutputFlags.hpp"
#include "DATA/data_StringStream.hpp"
#include "[@ELEMENT_REPOSITORY@][@ELEMENT_NAME@].hpp"

//---< Local Types >------------------------------------------------------------
//---< Local Macros >-----------------------------------------------------------
//---< Local Structs >----------------------------------------------------------
//---< Local Classes >----------------------------------------------------------
//---< Local Variables >--------------------------------------------------------
//---< Class >------------------------------------------------------------------

/**
 * Destructor
*/
[@ELEMENT_NAME@]::~[@ELEMENT_NAME@]()
{
}

/**
 * Convert the message into a printable string.
 *
 * @param stringConverted - data_StringStream* : The string in which the message will have been converted
 * @param outputHandler - FILE** : The output handler where the message will have to be written
 * @param levelMessage - int* : The message level value ( data_LogObject value, example : LOGOBJECT_SUB_CODE_ERROR )
 * @param codeMessage - VM_CHAR** : The message code value ( base_Messages value : <VALUE>_LOG_MARK, example : ERROR_LOG_MARK )
 *
 * @return The flag to test to display or not the message
*/
int [@ELEMENT_NAME@]::convertMessage( data_StringStream* stringConverted,
                                      FILE**             outputHandler,
                                      int*               levelMessage,
                                      VM_CHAR**          codeMessage )
{
   *outputHandler = data_OutputFlags::get<@CODE@>Output();
   *levelMessage = LOGOBJECT_SUB_CODE_<@CODE@>;
   *codeMessage = VM_CONST_STRING""<@CODE@>_LOG_MARK;

   stringConverted->concat( VM_CONST_STRING""DB_INTERNAL_MARK"[@ELEMENT_DESC@]" );
   stringConverted->concat( VM_CONST_STRING"[@ELEMENT_DESC@]" );

   return OUTPUT_FLAG_<@CODE@>;
}

/**
 * Test if the current message implied a retry for the last execution.
 *
 * @return false if a retry is not expected, another value otherwise
*/
int [@ELEMENT_NAME@]::needRetry()
{
   return <@BOOLEAN@>;
}

/**
 * Test if the current message implied a new connection, then a retry of the last exec.
 *
 * @return false if a reconnect is not expected, another value otherwise
*/
int [@ELEMENT_NAME@]::needReconnect()
{
   return <@BOOLEAN@>;
}

/**
 * Test if the current message is an error.
 *
 * @return false if the current message is not an error, another value otherwise.
*/
int [@ELEMENT_NAME@]::isError()
{
   return <@BOOLEAN@>;
}

//---< End of file >------------------------------------------------------------

