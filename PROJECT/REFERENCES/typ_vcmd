/**
 * @file [@ELEMENT_FILE@]
 *
 * C complete type definition
 * [@ELEMENT_DESC@]
 *
 * Factory : default_[@ELEMENT_FACTORY_NAME@]
 * Dynamic Desc : [@ELEMENT_DEFAULTBUF_NAME@]
 *
 * @author [@ELEMENT_AUTHOR@] - [@ELEMENT_EMAIL@]
 * @date [@ELEMENT_DATE@]
 * @verbatim
 * -------------------------
 * @endverbatim
*/

#pragma once

/*---< Includes >-------------------------------------------------------------*/

#include "[@ELEMENT_REPOSITORY@][@ELEMENT_NAME@].h"

#include "BASE/base_CommandRemote.typ"
#include "HEAP/heap_Vector.typ"

/*---< Local Definition >-----------------------------------------------------*/

#define [@ELEMENT_MACRO@]_HSTR( prefixe ) \
   /**
    * The storage for the parameter list
    * Default : NULL
    * size : sizeof( <@ELEMENT_VECTOR@> )
    * Vector : <@VECTOR_DESCRIPTION@>
   */ \
   HEAP_VECTOR_HSTR( prefixe ); \
\
   /**
    * The ancestor part.
   */ \
   BASE_COMMANDREMOTE_HSTR( prefixe )<@ATTRIBUTES@>

/*---< Macros >---------------------------------------------------------------*/

#define [@ELEMENT_MACRO@]_CONVERT_TO_BASE_COMMANDREMOTE( object )   [@ELEMENT_MACRO@]_PREFIXED_CONVERT_TO_BASE_COMMANDREMOTE( std, object )
#define [@ELEMENT_MACRO@]_CONVERT_FROM_BASE_COMMANDREMOTE( object ) [@ELEMENT_MACRO@]_PREFIXED_CONVERT_FROM_BASE_COMMANDREMOTE( std, object )
#define [@ELEMENT_MACRO@]_CONVERT_TO_HEAP_VECTOR( object )          [@ELEMENT_MACRO@]_PREFIXED_CONVERT_TO_HEAP_VECTOR( std, object )
#define [@ELEMENT_MACRO@]_CONVERT_FROM_HEAP_VECTOR( object )        [@ELEMENT_MACRO@]_PREFIXED_CONVERT_FROM_HEAP_VECTOR( std, object )

#define [@ELEMENT_MACRO@]_PREFIXED_CONVERT_TO_BASE_COMMANDREMOTE( prefixe, object )   ((base_CommandRemote*)( BASE_COMMANDREMOTE_PREFIXED_GETADDRFIRSTFIELD( prefixe, object ) ))
#define [@ELEMENT_MACRO@]_PREFIXED_CONVERT_FROM_BASE_COMMANDREMOTE( prefixe, object ) (([@ELEMENT_NAME@]*)( (char*)(object) - ( (char*)([@ELEMENT_MACRO@]_CONVERT_TO_BASE_COMMANDREMOTE( (([@ELEMENT_NAME@]*)NULL) )) - (char*)NULL ) ))
#define [@ELEMENT_MACRO@]_PREFIXED_CONVERT_TO_HEAP_VECTOR( prefixe, object )          ((heap_Vector*)( HEAP_VECTOR_PREFIXED_GETADDRFIRSTFIELD( prefixe, object ) ))
#define [@ELEMENT_MACRO@]_PREFIXED_CONVERT_FROM_HEAP_VECTOR( prefixe, object )        (([@ELEMENT_NAME@]*)( (char*)(object) - ( (char*)([@ELEMENT_MACRO@]_CONVERT_TO_HEAP_VECTOR( ((cmd_LogWriteCommandTest*)NULL) )) - (char*)NULL ) ))

#define [@ELEMENT_MACRO@]_GETADDRFIRSTFIELD( object ) [@ELEMENT_MACRO@]_PREFIXED_GETADDRFIRSTFIELD( std, object )


#define [@ELEMENT_MACRO@]_PREFIXED_GETADDRFIRSTFIELD( prefixe, object ) (([@ELEMENT_NAME@]*)( HEAP_VECTOR_PREFIXED_GETADDRFIRSTFIELD( prefixe, object ) ))


/*---< Variables >------------------------------------------------------------*/
/*---< Structure >------------------------------------------------------------*/

struct s_[@ELEMENT_NAME@]
{
   /*
   || La structure est définie dans un fichier include afin de permettre
   || l'héritage des capacitées de cette structure
   */
   [@ELEMENT_MACRO@]_HSTR( std );
};

/*---< End of file >----------------------------------------------------------*/

